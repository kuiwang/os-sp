<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-4.0.xsd  
     http://www.springframework.org/schema/tx  
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
     http://www.springframework.org/schema/jdbc  
     http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd 
     http://www.springframework.org/schema/mvc 
     http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <context:property-placeholder location="classpath*:*.properties" />

    <!-- Scans the classpath for annotated components that will be auto-registered 
        as Spring beans. For example @Controller and @Service. Make sure to set the 
        correct base-package -->
    <!-- <context:component-scan base-package="com.scott.dev" /> -->
    <!-- 使用Annotation自动注册Bean,只扫描@Controller -->
    <!-- base-package 如果多个，用","分隔 -->
    <context:component-scan base-package="com.scott.dev"
        use-default-filters="false">
        <context:include-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    <!-- <context:component-scan base-package="org.jiucai.appframework" /> -->

    <!-- Activates various annotations to be detected in bean classes -->
    <context:annotation-config />

    <!-- Configures the annotation-driven Spring MVC Controller programming 
        model. Note that, with Spring 4.0, this tag works in Servlet MVC only! -->
    <!-- <mvc:annotation-driven /> -->

    <!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
    <mvc:default-servlet-handler />
    <!-- 静态资源映射 -->
    <mvc:resources location="/static/" mapping="/static/**"
        cache-period="31536000" />

    <!-- 定义无Controller的path<->view直接映射 -->
    <mvc:view-controller path="/"
        view-name="redirect:${web.view.index}" />

    <!-- 默认的注解映射的支持,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
    <mvc:annotation-driven
        content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters
            register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean
                class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
            <bean
                class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="prettyPrint" value="false" />
                <property name="objectMapper">
                    <bean class="com.scott.dev.common.mapper.JsonMapper"></bean>
                </property>
            </bean>
            <!-- 使用XML格式输出数据 -->
            <bean
                class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                <constructor-arg>
                    <bean
                        class="org.springframework.oxm.xstream.XStreamMarshaller">
                        <property name="streamDriver">
                            <bean
                                class="com.thoughtworks.xstream.io.xml.StaxDriver" />
                        </property>
                        <property name="annotatedClasses">
                            <list>
                                <value>com.scott.dev.common.persistence.BaseEntity
                                </value>
                                <value>com.scott.dev.common.supcan.treelist.TreeList
                                </value>
                                <value>com.scott.dev.common.supcan.treelist.cols.Col
                                </value>
                                <value>com.scott.dev.common.supcan.treelist.cols.Group
                                </value>
                            </list>
                        </property>
                    </bean>
                </constructor-arg>
                <property name="supportedMediaTypes" value="application/xml"></property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager"
        class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <map>
                <entry key="xml" value="application/xml" />
                <entry key="json" value="application/json" />
            </map>
        </property>
        <property name="ignoreAcceptHeader" value="true" />
        <property name="favorPathExtension" value="true" />
    </bean>

    <!-- @ResponseBody -->
    <bean
        class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean
                    class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
                <bean
                    class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean
                    class="org.springframework.http.converter.ResourceHttpMessageConverter" />
            </list>
        </property>
    </bean>

    <!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="${adminPath}/**" />
            <mvc:exclude-mapping path="${adminPath}/" />
            <mvc:exclude-mapping path="${adminPath}/login" />
            <mvc:exclude-mapping path="${adminPath}/sys/menu/tree" />
            <mvc:exclude-mapping path="${adminPath}/sys/menu/treeData" />
            <mvc:exclude-mapping path="${adminPath}/oa/oaNotify/self/count" />
            <bean class="com.scott.dev.modules.sys.interceptor.LogInterceptor" />
        </mvc:interceptor>
        <!-- 手机视图拦截器 -->
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean
                class="com.scott.dev.modules.sys.interceptor.MobileInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 支持Shiro对Controller的方法级AOP安全控制 begin -->
    <bean
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <bean
        class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
                <prop key="java.lang.Throwable">error/500</prop>
            </props>
        </property>
    </bean>
    <!-- 支持Shiro对Controller的方法级AOP安全控制 end -->

    <!-- 解析文件上传 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="${web.maxUploadSize}" />
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="${web.maxInMemorySize}" />
    </bean>

    <!-- Imports outer render xml -->
    <!-- jsp -->
    <import resource="classpath:spring/spring-jsp.xml" />

    <!-- freemarker -->
    <import resource="classpath:spring/spring-freemarker.xml" />

</beans>
